version: '3.8'

services:
  # Docker-in-Docker service
  dind:
    image: docker:dind
    privileged: true  # Run in privileged mode to allow DinD
    networks:
      - jenkins_network
    environment:
      DOCKER_TLS_CERTDIR: ""  # Disables TLS since it's local
    volumes:
      - dind-storage:/var/lib/docker  # Persistent Docker storage for Docker data

  # Jenkins service
  jenkins:
    build:
      context: ./  # Build from the current directory where the Dockerfile is located
      dockerfile: Dockerfile  # Specify the Dockerfile
    environment:
      DOCKER_HOST: tcp://dind:2375  # Tell Jenkins to use the Docker daemon from the DinD container
    volumes:
      - jenkins_home:/var/jenkins_home  # Persistent storage for Jenkins
    ports:
      - "8080:8080"  # Exposes Jenkins on port 8080
    networks:
      - jenkins_network  # Connects to the specified network
    depends_on:
      - dind  # Ensures that the DinD container starts first

  # Your Express.js application service
  express-app:
    build:
      context: ../aws-elastic-beanstalk-express-js-sample  # Path to your Express.js app
      dockerfile: Dockerfile  # Specify your app's Dockerfile if needed
    ports:
      - "3000:3000"  # Exposes the app on port 3000
    networks:
      - jenkins_network  # Connects to the same network
    depends_on:
      - dind  # Ensure DinD is up before starting the app

# Persistent storage volumes
volumes:
  jenkins_home:  # Named volume for Jenkins data (automatically created)
  dind-storage:  # Named volume for Docker-in-Docker data (automatically created)

# Network configuration
networks:
  jenkins_network:  # Custom network for communication between Jenkins and DinD
